import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report

# Step 1: Create synthetic dataset
positive_feedback = [f"I love this product, it works great! #{i}" for i in range(50)]
negative_feedback = [f"Terrible quality, I am disappointed. #{i}" for i in range(50)]

feedbacks = positive_feedback + negative_feedback
labels = ['good'] * 50 + ['bad'] * 50

df = pd.DataFrame({
    'Feedback': feedbacks,
    'Label': labels
})

# Step 2: Preprocess text using TfidfVectorizer
vectorizer = TfidfVectorizer(
    stop_words='english',
    max_features=300,
    lowercase=True
)

X = vectorizer.fit_transform(df['Feedback'])
y = df['Label']

# Step 3: Split dataset into training (75%) and testing (25%)
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.25, random_state=42, stratify=y
)

# Step 4: Train Logistic Regression model
model = LogisticRegression()
model.fit(X_train, y_train)

# Step 5: Evaluate the model
y_pred = model.predict(X_test)
print("Classification Report on Test Set:")
print(classification_report(y_test, y_pred))

# Step 6: Function for text preprocessing + vectorization
def text_preprocess_vectorize(texts, vectorizer):
    """
    Takes a list of text samples and a fitted TfidfVectorizer,
    returns the transformed feature matrix.
    """
    return vectorizer.transform(texts)

example_texts = [
    "This item is amazing. I recommend it to everyone!",
    "It broke after one use. Waste of money."
]
vectorized_examples = text_preprocess_vectorize(example_texts, vectorizer)
print("Predicted labels:", model.predict(vectorized_examples))
